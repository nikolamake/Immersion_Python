# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ú–∞—Ç—Ä–∏—Ü–∞. –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –¥–ª—è:
# ‚óã –≤—ã–≤–æ–¥–∞ –Ω–∞ –ø–µ—á–∞—Ç—å,
# ‚óã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è,
# ‚óã —Å–ª–æ–∂–µ–Ω–∏—è,
# ‚óã *—É–º–Ω–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü
from random import randint


class Matrix:

    def __init__(self, line: int, column: int, numbre_top: int, numbre_botton: int):
        """ line - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –º–∞—Ç—Ä–∏—Ü—ã
            column - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã
            numbre_top - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Ç—Ä–∏—Ü–µ
            numbre_botton - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Ç—Ä–∏—Ü–µ"""
        self.line = line
        self.column = column
        self.numbre_top = numbre_top
        self.numbre_botton = numbre_botton
        self.matrix = [[randint(self.numbre_top, self.numbre_botton)
                        for j in range(self.column)] for i in range(self.line)]

    def __str__(self):
        """–í—ã–≤–æ–¥ –Ω–∞ –ø–µ—á–∞—Ç—å –≤ –≤–∏–¥–µ –º–∞—Ç—Ä–∏—Ü—ã"""
        res = ''
        for i in range(self.line):
            sub_res = ''
            for j in range(self.column):
                sub_res += str(f'{self.matrix[i][j]:>3}') + ' '
            res += sub_res + '\n'
        return res

    def __add__(self, other):
        """–°–ª–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö –º–∞—Ç—Ä–∏—Ü"""
        if self.line != other.line or self.column != other.column:
            raise ValueError('–°–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!')
        res = []
        for i in range(self.line):
            sub_res = []
            for j in range(self.column):
                sub_res.append(self.matrix[i][j] + other.matrix[i][j])
            res.append(sub_res)
        return res

    def __eq__(self, other):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –º–∞—Ç—Ä–∏—Ü"""
        if self.line != other.line or self.column != other.column:
            raise ValueError('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!')
        for i in range(self.line):
            for j in range(self.column):
                if self.matrix[i][j] != other.matrix[i][j]:
                    return False
        return True

    def __mul__(self, other):
        """–£–º–Ω–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö –º–∞—Ç—Ä–∏—Ü"""
        if self.column != other.line:
            raise ValueError('–£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!')
        res = [[sum(a * b for a, b in zip(row_a, col_b)) for col_b in zip(*other.matrix)] for row_a in self.matrix]
        return res


matrix_1 = Matrix(3, 3, 2, 20)
print('matrix_1' '\n' f'{matrix_1}')

matrix_2 = Matrix(3, 3, 4, 8)
print('matrix_2' '\n' f'{matrix_2}')

matrix_3 = matrix_1 + matrix_2
print('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–µ–Ω–∏—è matrix_1 –∏ matrix_2')
for x in matrix_3:
    for r in x:
        print(f'{r:>3}', end='\t')
    print()

matrix_4 = matrix_1 * matrix_2
print('–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è matrix_1 –Ω–∞ matrix_2')
for x in matrix_4:
    for r in x:
        print(f'{r:>3}', end='\t')
    print()


print(f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–Ω–µ–Ω–∏—è matrix_1 –∏ matrix_2 \n{matrix_1 == matrix_2}')
